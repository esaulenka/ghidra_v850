
# (6) Conditional arithmetic instructions
# part of (9) Data manipulation instructions
# part of (13) Branch instructions


cc0003: "v"		is op0003=0x0		{ tmp:1 =  ($(PSW_OV));							export tmp; }
cc0003: "nv"	is op0003=0x8		{ tmp:1 = !($(PSW_OV));							export tmp; }
cc0003: "c"		is op0003=0x1		{ tmp:1 =  ($(PSW_CY));							export tmp; }
cc0003: "nc"	is op0003=0x9		{ tmp:1 = !($(PSW_CY));							export tmp; }
cc0003: "e"		is op0003=0x2		{ tmp:1 =  ($(PSW_Z));							export tmp; }
cc0003: "ne"	is op0003=0xA		{ tmp:1 = !($(PSW_Z));							export tmp; }
cc0003: "nh"	is op0003=0x3		{ tmp:1 =  ($(PSW_CY) || $(PSW_Z)); 			export tmp; }
cc0003: "h"		is op0003=0xB		{ tmp:1 = !($(PSW_CY) || $(PSW_Z)); 			export tmp; }
cc0003: "n"		is op0003=0x4		{ tmp:1 =  ($(PSW_S)); 							export tmp; }
cc0003: "p"		is op0003=0xC		{ tmp:1 = !($(PSW_S)); 							export tmp; }
cc0003: "r"		is op0003=0x5		{ tmp:1 = 1; 									export tmp; }
cc0003: "sa"	is op0003=0xD		{ tmp:1 =  ($(PSW_SAT));						export tmp; }
cc0003: "lt"	is op0003=0x6		{ tmp:1 =  ($(PSW_S) ^^ $(PSW_OV));				export tmp; }
cc0003: "ge"	is op0003=0xE		{ tmp:1 = !($(PSW_S) ^^ $(PSW_OV));				export tmp; }
cc0003: "le"	is op0003=0x7		{ tmp:1 =  ($(PSW_S) ^^ $(PSW_OV) || $(PSW_Z)); export tmp; }
cc0003: "gt"	is op0003=0xF		{ tmp:1 = !($(PSW_S) ^^ $(PSW_OV) || $(PSW_Z));	export tmp; }

# same as cc0003 with another condition bits
cc1720: "v"		is op1720=0x0		{ tmp:1 =  ($(PSW_OV));							export tmp; }
cc1720: "nv"	is op1720=0x8		{ tmp:1 = !($(PSW_OV));							export tmp; }
cc1720: "c"		is op1720=0x1		{ tmp:1 =  ($(PSW_CY));							export tmp; }
cc1720: "nc"	is op1720=0x9		{ tmp:1 = !($(PSW_CY));							export tmp; }
cc1720: "e"		is op1720=0x2		{ tmp:1 =  ($(PSW_Z));							export tmp; }
cc1720: "ne"	is op1720=0xA		{ tmp:1 = !($(PSW_Z));							export tmp; }
cc1720: "nh"	is op1720=0x3		{ tmp:1 =  ($(PSW_CY) || $(PSW_Z)); 			export tmp; }
cc1720: "h"		is op1720=0xB		{ tmp:1 = !($(PSW_CY) || $(PSW_Z)); 			export tmp; }
cc1720: "n"		is op1720=0x4		{ tmp:1 =  ($(PSW_S)); 							export tmp; }
cc1720: "p"		is op1720=0xC		{ tmp:1 = !($(PSW_S)); 							export tmp; }
cc1720: "r"		is op1720=0x5		{ tmp:1 = 1; 									export tmp; }
cc1720: "sa"	is op1720=0xD		{ tmp:1 =  ($(PSW_SAT));						export tmp; }
cc1720: "lt"	is op1720=0x6		{ tmp:1 =  ($(PSW_S) ^^ $(PSW_OV));				export tmp; }
cc1720: "ge"	is op1720=0xE		{ tmp:1 = !($(PSW_S) ^^ $(PSW_OV));				export tmp; }
cc1720: "le"	is op1720=0x7		{ tmp:1 =  ($(PSW_S) ^^ $(PSW_OV) || $(PSW_Z)); export tmp; }
cc1720: "gt"	is op1720=0xF		{ tmp:1 = !($(PSW_S) ^^ $(PSW_OV) || $(PSW_Z));	export tmp; }


#Bcond addr9
:b^cc0003 addr9 is op0710=0xB & cc0003 & addr9 {
	if (cc0003) goto addr9;
}
:br addr9 is op0710=0xB & op0003=0x5 & addr9 {
	goto addr9;
}

# SETF cond, reg2
:setf^cc0003 R1115 is op0410=0x7E & cc0003 & R1115; op1631=0 {
	R1115 = zext(cc0003);
}
# SASF cccc, reg2
:sasf^cc0003 R1115 is op0410=0x7E & cc0003 & R1115; op1631=0x0200 {
	R1115 = (R1115 << 1) | zext(cc0003);
}

# CMOV cccc, imm5, reg2, reg3
:cmov^cc1720 s0004, R1115, R2731 is op0510=0x3F & s0004 & R1115; op2126=0x18 & op1616=0 & cc1720 & R2731 {
	if (cc1720) goto <true>;
	# false
		R2731 = R1115;
		goto inst_next;
	<true>
		R2731 = s0004;
}
# CMOV cccc, reg1, reg2, reg3
:cmov^cc1720 R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op2126=0x19 & op1616=0 & cc1720 & R2731 {
	if (cc1720) goto <true>;
	# false
		R2731 = R1115;
		goto inst_next;
	<true>
		R2731 = R0004;
}

# SBF cccc, reg1, reg2, reg3
:sbf^cc1720 R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op2126=0x1C & op1616=0 & cc1720 & R2731 {
	local lsb:4 = zext(cc1720);
	local res:4 = R1115 - R0004 - lsb;
	set_S_Z (res);
	local sA = R0004 s< 0; local sB = R1115 s< 0; local sR = res s< 0;
	$(PSW_OV) = (sA != sB) && (sB == sR);
	$(PSW_CY) = (R1115 < (R0004 + lsb));
	R2731 = res;
}
# ADF cccc, reg1, reg2, reg3
:adf^cc1720 R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op2126=0x1D & op1616=0 & cc1720 & R2731 {
	local lsb:4 = zext(cc1720);
	local res:4 = R1115 + R0004 + lsb;
	set_S_Z (res);
	$(PSW_CY) = carry(R1115, R0004) || carry(R1115 + R0004, lsb);
	local sA = R0004 s< 0; local sB = R1115 s< 0; local sR = res s< 0;
	$(PSW_OV) = (sA == sB) && (sB != sR);
	R2731 = res;
}

