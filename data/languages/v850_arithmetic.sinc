
# (3) Multiply instructions
# (4) Multiply-accumulate instructions
# (5) Arithmetic instructions
# (7) Saturated operation instructions
# (11) Divide instructions
# (12) High-speed divide instructions


# MOV reg1, reg2
:mov R0004, r1115 is op0510=0x00 & R0004 & r1115 {
	r1115 = R0004;
}

# DIVH reg1, reg2
:divh r0004, r1115 is op0510=0x02 & r0004 & r1115 {
	local reg2:4 = r1115;
	local reg1:4 = sext(r0004:2);
	setOV ((reg2 == 0x80000000 && reg1 == 0xFFFFFFFF) || reg1 == 0);
	r1115 = reg2 / reg1;
	set_S_Z (r1115);
}

macro saturate(value) {
	if (value s>  0x7fffffff) goto <pos_sat>;
	if (value s< -0x80000000) goto <neg_sat>;
	goto <end>;
	<pos_sat> value =  0x7fffffff; goto <end>;
	<neg_sat> value = -0x80000000; goto <end>;
	<end>
}

# SATSUBR reg1, reg2
:satsubr R0004, r1115 is op0510=0x04 & R0004 & r1115 & op1115!=0 {
	local res:5 = sext(R0004) - sext(r1115);
	flags_sub(R0004, r1115);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	r1115 = res:4;
}
# SATSUB reg1, reg2
:satsub R0004, r1115 is op0510=0x05 & R0004 & r1115 & op1115!=0 {
	local res:5 = sext(r1115) - sext(R0004);
	flags_sub(r1115, R0004);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	r1115 = res:4;
}
# SATADD reg1, reg2
:satadd R0004, r1115 is op0510=0x06 & R0004 & r1115 & op1115!=0 {
	local res:5 = sext(R0004) + sext(r1115);
	flags_add(R0004, r1115);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	r1115 = res:4;
}

# MULH reg1, reg2
:mulh R0004, R1115 is op0510=0x07 & R0004 & R1115 & op1115!=0 {
	local reg1 = sext(R0004:2);
	local reg2 = sext(R1115:2);
	R1115 = reg1 * reg2;
}

# SUBR reg1, reg2
:subr R0004, R1115 is op0510=0x0C & R0004 & R1115 {
	local res = R0004 - R1115;
	flags_sub(R0004, R1115);
	R1115 = res;
}
# SUB reg1, reg2
:sub R0004, R1115 is op0510=0x0D & R0004 & R1115 {
	local res = R1115 - R0004;
	flags_sub(R1115, R0004);
	R1115 = res;
}
# ADD reg1, reg2
:add R0004, R1115 is op0510=0x0E & R0004 & R1115 {
	local res = R1115 + R0004;
	flags_add(R1115, R0004);
	R1115 = res;
}
# CMP reg1, reg2
:cmp R0004, R1115 is op0510=0x0F & R0004 & R1115 {
	flags_sub(R1115, R0004);
}

# MOV imm5, reg2
:mov s0004, r1115 is op0510=0x10 & s0004 & r1115 & op1115!=0 {
	r1115 = s0004;
}

#SATADD imm5, reg2
:satadd s0004, r1115 is op0510=0x11 & s0004 & r1115 & op1115!=0 {
	local res:5 = s0004 + sext(r1115);
	flags_add(s0004, r1115);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	r1115 = res:4;
}

# ADD imm5, reg2
:add s0004, r1115 is op0510=0x12 & s0004 & r1115 {
	local res = r1115 + s0004;
	flags_add (r1115, s0004);
	r1115 = res;
}

# CMP imm5, reg2
:cmp s0004, R1115 is op0510=0x13 & s0004 & R1115 {
	flags_sub(R1115, s0004);
}

# MULH imm5, reg2
:mulh s0004, r1115 is op0510=0x17 & s0004 & r1115 {
	r1115 = sext(r1115:2) * s0004;
}

# ADDI imm16, reg1, reg2
:addi s1631, R0004, R1115 is op0510=0x30 & R1115 & R0004; s1631 {
	R1115 = R0004 + s1631;
	flags_add (R0004, s1631);
}

# MOV imm32, reg1
:mov imm32, R0004 is op0515=0x031 & R0004; op1631; op3247
[ imm32 = (op3247 << 16) | op1631; ] {
	R0004 = imm32;
}
# MOVEA imm16, reg1, reg2
:movea s1631, R0004, r1115 is op0510=0x31 & op1115!=0 & R0004 & r1115; s1631 {
	r1115 = R0004 + s1631;
}
# MOVHI imm16, reg1, reg2
:movhi s1631, R0004, r1115 is op0510=0x32 & op1115!=0 & R0004 & r1115; s1631 {
	r1115 = R0004 + (s1631 << 16);
}

# SATSUBI imm16, reg1, reg2
:satsubi s1631, R0004, r1115 is op0510=0x33 & op1115!=0 & R0004 & r1115; s1631 {
	local res:5 = sext(R0004) - s1631;
	flags_sub(R0004, s1631);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	r1115 = res:4;}

# MULHI imm16, reg1, reg2
:mulhi s1631, R0004, R1115 is op0510=0x37 & R1115 & R0004; s1631 {
	R1115 = sext(R0004:2) * s1631;
}

# MUL reg1, reg2, reg3
:mul R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x220 & R2731 {
	local tmp:8 = sext(R1115) * sext(R0004);
	R1115 = tmp[0,32];
	R2731 = tmp[32,32];
}
# MULU reg1, reg2, reg3
:mulu R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x222 & R2731 {
	local tmp:8 = zext(R1115) * zext(R0004);
	R1115 = tmp[0,32];
	R2731 = tmp[32,32];
}
# MUL imm9, reg2, reg3
:mul imm9, R1115, R2731 is op0510=0x3F & op0004 & R1115; op2226=9 & op1617=0 & s1821 & R2731
[ imm9 = (s1821 << 5) | op0004; ] {
	local tmp:8 = sext(R1115) * imm9;
	R1115 = tmp[0,32];
	R2731 = tmp[32,32];
}
# MULU imm9, reg2, reg3
:mulu imm9, R1115, R2731 is op0510=0x3F & op0004 & R1115; op2226=9 & op1617=2 & op1821 & R2731 
[ imm9 = (op1821 << 5) | op0004; ] {
	local tmp:8 = zext(R1115) * imm9;
	R1115 = tmp[0,32];
	R2731 = tmp[32,32];
}
# DIVH reg1, reg2, reg3
:divh R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x280 & R2731 {
	local divisor:4 = sext(R0004[0,16]);
	local quot:4 = R1115 s/ divisor;
	local mod:4 = R1115 s% divisor;
	setOV ((R1115 == 0x80000000 && divisor == 0xFFFFFFFF) || divisor == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}
# DIVHU reg1, reg2, reg3
:divhu R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x282 & R2731 {
	local divisor:4 = zext(R0004[0,16]);
	local quot:4 = R1115 / divisor;
	local mod:4 = R1115 % divisor;
	setOV (divisor == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}
# DIV reg1, reg2, reg3
:div R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x2C0 & R2731 {
	local quot:4 = R1115 s/ R0004;
	local mod:4 = R1115 s% R0004;
	setOV ((R1115 == 0x80000000 && R0004 == 0xFFFFFFFF) || R0004 == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}
# DIVQ reg1, reg2, reg3
:div R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x2FC & R2731 {
	local quot:4 = R1115 s/ R0004;
	local mod:4 = R1115 s% R0004;
	setOV ((R1115 == 0x80000000 && R0004 == 0xFFFFFFFF) || R0004 == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}
# DIVU reg1, reg2, reg3
:divu R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x2C2 & R2731 {
	local quot:4 = R1115 / R0004;
	local mod:4 = R1115 % R0004;
	setOV (R0004 == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}
# DIVQU reg1, reg2, reg3
:divqu R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x2FE & R2731 {
	local quot:4 = R1115 / R0004;
	local mod:4 = R1115 % R0004;
	setOV (R0004 == 0);
	set_S_Z (quot);
	R1115 = quot;
	R2731 = mod;
}

# SATSUB reg1, reg2, reg3
:satsub R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x39A & R2731 {
	local res:5 = sext(R1115) - sext(R0004);
	flags_sub(R1115, R0004);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	R2731 = res:4;
}

# SATADD reg1, reg2, reg3
:satadd R0004, R1115, R2731 is op0510=0x3F & R0004 & R1115; op1626=0x3BA & R2731 {
	local res:5 = sext(R0004) + sext(R1115);
	flags_add(R0004, R1115);
	$(PSW_SAT) = $(PSW_SAT) || $(PSW_CY);
	saturate(res);
	R2731 = res:4;
}

# MAC reg1, reg2, reg3, reg4
:mac R0004, R1115, R2731pair, R1620pair is op0510=0x3F & R0004 & R1115; op2126=0x1E & op1616=0 & R1620pair & R2731pair {
	R1620pair = R2731pair + sext(R0004) * sext(R1115);
}
# MACU reg1, reg2, reg3, reg4
:macu R0004, R1115, R2731pair, R1620pair is op0510=0x3F & R0004 & R1115; op2126=0x1F & op1616=0 & R1620pair & R2731pair {
	R1620pair = R2731pair + zext(R0004) * zext(R1115);
}

