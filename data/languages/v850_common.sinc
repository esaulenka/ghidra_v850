# sleigh specification file for Renesas v850
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax

define endian=little;
define alignment=2;

define space ram      type=ram_space      size=4  default;
define space register type=register_space size=4;

# general purpose registers
define register offset=0x00 size=4 
	[ r0 r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
define register offset=0x00 size=8 
	[ r0r1  r2sp  gptp  r6r7  r8r9  r10r11  r12r13  r14r15  r16r17  r18r19  r20r21  r22r23  r24r25  r26r27  r28r29  eplp  ];

# special registers
@if defined(V850E2M)
define register offset=0x80 size=4 [
    EIPC    EIPSW   FEPC    FEPSW   ECR     PSW     FPSR    FPEPC
    FPST    FPCC    FPCFG   SCCFG   SCBP    EIIC    FEIC    DBIC
    CTPC    CTPSW   DBPC    DBPSW   CTBP    DIR     DBG22   DBG23
    DBG24   DBG25   DBG26   DBG27   EIWR    FEWR    DBWR    BSEL
];
@elif defined(V850E3)
define register offset=0x80 size=4 [
    EIPC    EIPSW   FEPC    FEPSW   ECR     PSW     FPSR    FPEPC
    FPST    FPCC    FPCFG   FPEC    _       EIIC    FEIC    DBIC
    CTPC    CTPSW   DBPC    DBPSW   CTBP    DIR     DBG22   DBG23
    DBG24   DBG25   DBG26   DBG27   EIWR    FEWR    DBWR    BSEL
];
@endif

define register offset=0x1000 size=4 [ PC ];


@define PSW_PP  "PSW[19,1]"
@define PSW_NPW "PSW[18,1]"
@define PSW_DMP "PSW[17,1]"
@define PSW_IMP "PSW[16,1]"
@define PSW_NP  "PSW[7,1]"
@define PSW_EP  "PSW[6,1]"
@define PSW_ID  "PSW[5,1]"
@define PSW_SAT "PSW[4,1]"
@define PSW_CY  "PSW[3,1]"
@define PSW_OV  "PSW[2,1]"
@define PSW_S   "PSW[1,1]"
@define PSW_Z   "PSW[0,1]"



define pcodeop TODO;

define pcodeop __nop;
define pcodeop __synchronize;
define pcodeop __halt;
define pcodeop __snooze;
define pcodeop __disable_irq;
define pcodeop __enable_irq;



macro ternary(res, cond, avar, bvar) {
	res = (avar * zext(cond != 0)) + (bvar * zext(cond == 0));
}
macro condition(res, cond, true_val, false_val) {
	if (cond) goto <true>;
		res = false_val;
		goto <end>;
	<true>
		res = true_val;
	<end>
}

define token instr(16)
	op0000 = (0,0)
	op0003 = (0,3)
	op0004 = (0,4)
	op0005 = (0,5)
	op0006 = (0,6)
	op0010 = (0,10)
	op0014 = (0,14)
	op0015 = (0,15)
	op0105 = (1,5)
	op0106 = (1,6)
	op0406 = (4,6)
	op0410 = (4,10)
	op0414 = (4,14)
	op0505 = (5,5)
	op0510 = (5,10)
	op0515 = (5,15)
	op0610 = (6,10)
	op0615 = (6,15)
	op0710 = (7,10)
	op1112 = (11,12)
	op1113 = (11,13)
	op1114 = (11,14)
	op1115 = (11,15)
	op1315 = (13,15)
	op1415 = (14,15)
	op1515 = (15,15)
	xR0004 = (0,4)
	R0004odd = (0,4)
	xR1115 = (11,15)
	r0004 = (0,4)
	r1115 = (11,15)
	R1115odd = (11,15)
	s0003 = (0,3) signed
	s0004 = (0,4) signed
	s0404 = (4,4) signed
	s0005 = (0,5) signed
	s1115 = (11,15) signed
	SR0004 = (0,4)
	SR0004_1 = (0,4)
	SR0004_2 = (0,4)
	SR0004_3 = (0,4)
	SR0004_4 = (0,4)
	SR0004_5 = (0,4)
	SR0004_6 = (0,4)
	SR0004_7 = (0,4)
	SR0004_d = (0,4)
	VR0004 = (0,4)
	SR1115 = (11,15)
	SR1115_1 = (11,15)
	SR1115_2 = (11,15)
	SR1115_3 = (11,15)
	SR1115_4 = (11,15)
	SR1115_5 = (11,15)
	SR1115_6 = (11,15)
	SR1115_7 = (11,15)
	SR1115_d = (11,15)
	VR1115 = (11,15)
;
define token instr2(16)
	op1616 = (0,0)
	op1617 = (0,1)
	op1619 = (0,3)
	op1620 = (0,4)
	op1624 = (0,8)
	op1626 = (0,10)
	op1631 = (0,15)
	op1719 = (1,3)
	op1720 = (1,4)
	op1731 = (1,15)
	op0_1720 = (1,4)
	op1_1720 = (1,4)
	op1821 = (2,5)
	op2020 = (4,4)
	op2026 = (4,10)
	op2126 = (5,10)
	op2122 = (5,6)
	op2131 = (5,15)
	op2226 = (6,10)
	op2323 = (7,7)
	op2426 = (8,10)
	op2727 = (11,11)
	op2729 = (11,13)
	op2731 = (11,15)
	op2831 = (12,15)
	op3030 = (14,14)
	op3031 = (14,15)
	op3131 = (15,15)
	r1620 = (0,4)
	xR2731 = (11,15)
	R1620odd = (0,4)
	R2731odd = (11,15)
	s1631 = (0,15) signed
	s1731 = (1,15) signed
	s1821 = (2,5) signed
	fcond2730 = (11,14)
	fcbit1719 = (1,3)
;
define token instr3(16)
	op3247 = (0,15)
	s3247 = (0,15) signed
;
define token instr4(16)
	op4863 = (0,15);

# used only in PREPARE/DISPOSE instructions
define token prep(32)
	prep0615 = (6,15)
	prep0105 = (1,5)
	prep1620 = (16,20)
	prep1620r = (16,20)
	prep00 = (0,0)
	prep21 = (21,21)
	prep22 = (22,22)
	prep23 = (23,23)
	prep24 = (24,24)
	prep25 = (25,25)
	prep26 = (26,26)
	prep27 = (27,27)
	prep28 = (28,28)
	prep29 = (29,29)
	prep30 = (30,30)
	prep31 = (31,31)
	prep2223 = (22,31)
	prep2431 = (24,31)
	prep2931 = (29,31)
	prep3031 = (30,31)
	prep2427 = (24,27)
	prep2527 = (25,27)
	prep2627 = (26,27)
;


attach variables [op0_1720] [r0 r2 gp r6 r8 r10 r12 r14 r16 r18 r20 r22 r24 r26 r28 ep];
attach variables [op1_1720] [r1 sp tp r7 r9 r11 r13 r15 r17 r19 r21 r23 r25 r27 r29 lp];

reg4: op0_1720 is op2323=0 & op0_1720 { export op0_1720; }
reg4: op1_1720 is op2323=1 & op1_1720 { export op1_1720; }

attach variables [ xR0004 xR1115 xR2731]
	[ r0 r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
attach variables [ r0004 r1115 r1620 prep1620r ]
	[ _  r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
attach variables [ R0004odd R1115odd R1620odd R2731odd ]
	[ r0r1 _ r2sp _ gptp _ r6r7 _ r8r9 _ r10r11 _ r12r13 _ r14r15 _ r16r17 _ r18r19 _ r20r21 _ r22r23 _ r24r25 _ r26r27 _ r28r29 _ eplp _ ];

attach names [fcond2730]
  ["f" "un" "eq" "ueq" "olt" "ult" "ole" "ule" "sd" "ngle" "seq" "ngl" "lt" "nge" "le" "ngt"];


@if defined(V850E2M)
attach variables [ SR0004 SR1115 ] [
    EIPC    EIPSW   FEPC    FEPSW   ECR     PSW     FPSR    FPEPC
    FPST    FPCC    FPCFG   SCCFG   SCBP    EIIC    FEIC    DBIC
    CTPC    CTPSW   DBPC    DBPSW   CTBP    DIR     DBG22   DBG23
    DBG24   DBG25   DBG26   DBG27   EIWR    FEWR    DBWR    BSEL
];
@elif defined(V850E3)
# looks like in the latest MCUs SCCFG/SCBP is in another place
attach variables [ SR0004 SR1115 ] [
    EIPC    EIPSW   FEPC    FEPSW   ECR     PSW     FPSR    FPEPC
    FPST    FPCC    FPCFG   FPEC    _       EIIC    FEIC    DBIC
    CTPC    CTPSW   DBPC    DBPSW   CTBP    DIR     DBG22   DBG23
    DBG24   DBG25   DBG26   DBG27   EIWR    FEWR    DBWR    BSEL
];
@endif



addr9: rel is op0406 & s1115
[ rel = ((s1115 << 4) | (op0406 << 1)) + inst_start; ] { export *:4 rel; }
addr22: rel is s0005; op1631 & op1616=0
[ rel = ((s0005 << 16) | op1631) + inst_start; ] { export *:4 rel; }
addr32: rel is op1731 & op1616=0; op3247
[ rel = ((op3247 << 16) | op1731 << 1) + inst_start; ] { export *:4 rel; }
addr32abs: rel is op1731 & op1616=0; op3247
[ rel = ((op3247 << 16) | op1731 << 1); ] { export *[const]:4 rel; }

@if defined (V850E3)
addr17b: rel is s0404 ; op1731 & op1616=1
[ rel = ((s0404 << 16) | (op1731 << 1)) + inst_start; ] { export *:4 rel; }

addr16loop: rel is op1731
[ rel = inst_start - (op1731 << 1); ] { export *:4 rel; }

@endif


# PSW flags manipulations
macro setZ(res) 		{	$(PSW_Z) = ((res) == 0);	}
macro setS(res) 		{	$(PSW_S) = ((res) s< 0);	}
macro setOV(res)		{	$(PSW_OV) = res;	}
macro clrOV() 			{	$(PSW_OV) = 0;		}
macro set_S_Z(res)		{	setS(res); setZ(res);	}
macro set_nOV_S_Z(res)	{	clrOV(); set_S_Z(res);	}
macro set_C(res) 		{	$(PSW_CY) = (res != 0);	}
macro flags_add(op1,op2) {
	local A:4 = op1;		local B:4 = op2;		local R = A + B;
	local sA  = A s< 0;		local sB  = B s< 0;		local sR = R s< 0;
	$(PSW_OV) = (sA == sB) && (sB != sR);
	$(PSW_CY) = carry(A, B);
	set_S_Z (R);
}
macro flags_sub(op1,op2) {
	local A:4 = op1;		local B:4 = op2;		local R = A - B;
	local sA  = A s< 0;		local sB  = B s< 0;		local sR = R s< 0;
	$(PSW_OV) = (sA != sB) && (sB == sR);
	$(PSW_CY) = (A < B);
	set_S_Z (R);
}

# read r0 always return zero
R0004: xR0004 is xR0004 & xR0004=0	{	local x:4=0; export x;	}
R0004: xR0004 is xR0004				{	export xR0004;	}

R1115: xR1115 is xR1115 & xR1115=0	{	local x:4=0; export x;	}
R1115: xR1115 is xR1115				{	export xR1115;	}

R2731: xR2731 is xR2731 & xR2731=0	{	local x:4=0; export x;	}
R2731: xR2731 is xR2731				{	export xR2731;	}

